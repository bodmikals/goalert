// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package pgxdb

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	APIKeyAuthCheck(ctx context.Context, id uuid.UUID) (bool, error)
	// APIKeyAuth returns the API key policy with the given id, if it exists and is not expired.
	APIKeyAuthPolicy(ctx context.Context, id uuid.UUID) ([]byte, error)
	APIKeyDelete(ctx context.Context, arg APIKeyDeleteParams) error
	APIKeyForUpdate(ctx context.Context, id uuid.UUID) (APIKeyForUpdateRow, error)
	APIKeyInsert(ctx context.Context, arg APIKeyInsertParams) error
	// APIKeyList returns all API keys, along with the last time they were used.
	APIKeyList(ctx context.Context) ([]APIKeyListRow, error)
	// APIKeyRecordUsage records the usage of an API key.
	APIKeyRecordUsage(ctx context.Context, arg APIKeyRecordUsageParams) error
	APIKeyUpdate(ctx context.Context, arg APIKeyUpdateParams) error
	ActiveTxCount(ctx context.Context, xactStart pgtype.Timestamptz) (int64, error)
	AlertFeedback(ctx context.Context, dollar_1 []int32) ([]AlertFeedbackRow, error)
	AlertHasEPState(ctx context.Context, alertID int64) (bool, error)
	AlertLogHBIntervalMinutes(ctx context.Context, id uuid.UUID) (int32, error)
	AlertLogInsertEP(ctx context.Context, arg AlertLogInsertEPParams) error
	AlertLogInsertMany(ctx context.Context, arg AlertLogInsertManyParams) error
	AlertLogInsertSvc(ctx context.Context, arg AlertLogInsertSvcParams) error
	AlertLogLookupCMDest(ctx context.Context, id uuid.UUID) (NullDestV1, error)
	AlertLogLookupCallbackDest(ctx context.Context, id uuid.UUID) (NullDestV1, error)
	AlertLogLookupNCDest(ctx context.Context, id uuid.UUID) (NullDestV1, error)
	AlertManyMetadata(ctx context.Context, alertIds []int64) ([]AlertManyMetadataRow, error)
	AlertMetadata(ctx context.Context, alertID int64) ([]byte, error)
	AlertSetMetadata(ctx context.Context, arg AlertSetMetadataParams) (int64, error)
	AllPendingMsgDests(ctx context.Context, arg AllPendingMsgDestsParams) ([]AllPendingMsgDestsRow, error)
	AuthLinkAddAuthSubject(ctx context.Context, arg AuthLinkAddAuthSubjectParams) error
	AuthLinkAddReq(ctx context.Context, arg AuthLinkAddReqParams) error
	AuthLinkMetadata(ctx context.Context, id uuid.UUID) ([]byte, error)
	AuthLinkUseReq(ctx context.Context, id uuid.UUID) (AuthLinkUseReqRow, error)
	CalSubAuthUser(ctx context.Context, arg CalSubAuthUserParams) (uuid.UUID, error)
	CalSubRenderInfo(ctx context.Context, id uuid.UUID) (CalSubRenderInfoRow, error)
	CalSubUserNames(ctx context.Context, dollar_1 []uuid.UUID) ([]CalSubUserNamesRow, error)
	ConnectionInfo(ctx context.Context) ([]ConnectionInfoRow, error)
	ContactMethodAdd(ctx context.Context, arg ContactMethodAddParams) error
	ContactMethodEnableDisable(ctx context.Context, arg ContactMethodEnableDisableParams) (uuid.UUID, error)
	ContactMethodFindAll(ctx context.Context, userID uuid.UUID) ([]UserContactMethod, error)
	ContactMethodFindMany(ctx context.Context, dollar_1 []uuid.UUID) ([]UserContactMethod, error)
	ContactMethodFindOneUpdate(ctx context.Context, id uuid.UUID) (UserContactMethod, error)
	ContactMethodFineOne(ctx context.Context, id uuid.UUID) (UserContactMethod, error)
	ContactMethodLookupUserID(ctx context.Context, dollar_1 []uuid.UUID) ([]uuid.UUID, error)
	ContactMethodMetaDest(ctx context.Context, dest NullDestV1) (ContactMethodMetaDestRow, error)
	ContactMethodUpdate(ctx context.Context, arg ContactMethodUpdateParams) error
	ContactMethodUpdateMetaDest(ctx context.Context, arg ContactMethodUpdateMetaDestParams) error
	CreateCalSub(ctx context.Context, arg CreateCalSubParams) (pgtype.Timestamptz, error)
	DatabaseInfo(ctx context.Context) (DatabaseInfoRow, error)
	DeleteContactMethod(ctx context.Context, dollar_1 []uuid.UUID) error
	DeleteManyCalSub(ctx context.Context, arg DeleteManyCalSubParams) error
	DisableChangeLogTriggers(ctx context.Context) error
	EPStepActionsAddAction(ctx context.Context, arg EPStepActionsAddActionParams) error
	EPStepActionsByStepId(ctx context.Context, escalationPolicyStepID uuid.UUID) ([]EPStepActionsByStepIdRow, error)
	EPStepActionsDeleteAction(ctx context.Context, arg EPStepActionsDeleteActionParams) error
	EnableChangeLogTriggers(ctx context.Context) error
	// Get a pending signal's rendered params.
	EngineGetSignalParams(ctx context.Context, messageID uuid.NullUUID) ([]byte, error)
	// Check if a destination is known in user_contact_methods or notification_channels table.
	EngineIsKnownDest(ctx context.Context, dest NullDestV1) (pgtype.Bool, error)
	FindManyCalSubByUser(ctx context.Context, userID uuid.UUID) ([]FindManyCalSubByUserRow, error)
	FindOneCalSub(ctx context.Context, id uuid.UUID) (FindOneCalSubRow, error)
	FindOneCalSubForUpdate(ctx context.Context, id uuid.UUID) (FindOneCalSubForUpdateRow, error)
	ForeignKeyRefs(ctx context.Context) ([]ForeignKeyRefsRow, error)
	GQLUserOnCallOverview(ctx context.Context, userID uuid.UUID) ([]GQLUserOnCallOverviewRow, error)
	IntKeyCreate(ctx context.Context, arg IntKeyCreateParams) error
	IntKeyDelete(ctx context.Context, ids []uuid.UUID) error
	IntKeyDeleteConfig(ctx context.Context, id uuid.UUID) error
	IntKeyDeleteSecondaryToken(ctx context.Context, id uuid.UUID) error
	IntKeyFindByService(ctx context.Context, serviceID uuid.UUID) ([]IntKeyFindByServiceRow, error)
	IntKeyFindOne(ctx context.Context, id uuid.UUID) (IntKeyFindOneRow, error)
	IntKeyGetConfig(ctx context.Context, id uuid.UUID) (UIKConfig, error)
	IntKeyGetServiceID(ctx context.Context, arg IntKeyGetServiceIDParams) (uuid.UUID, error)
	IntKeyGetType(ctx context.Context, id uuid.UUID) (EnumIntegrationKeysType, error)
	IntKeyInsertSignalMessage(ctx context.Context, arg IntKeyInsertSignalMessageParams) error
	IntKeyPromoteSecondary(ctx context.Context, id uuid.UUID) (pgtype.Text, error)
	IntKeySetConfig(ctx context.Context, arg IntKeySetConfigParams) error
	IntKeySetPrimaryToken(ctx context.Context, arg IntKeySetPrimaryTokenParams) (uuid.UUID, error)
	IntKeySetSecondaryToken(ctx context.Context, arg IntKeySetSecondaryTokenParams) (uuid.UUID, error)
	IntKeyTokenHints(ctx context.Context, id uuid.UUID) (IntKeyTokenHintsRow, error)
	IntKeyUIKValidateService(ctx context.Context, arg IntKeyUIKValidateServiceParams) (uuid.UUID, error)
	LabelDeleteKeyByTarget(ctx context.Context, arg LabelDeleteKeyByTargetParams) error
	LabelFindAllByTarget(ctx context.Context, tgtServiceID uuid.UUID) ([]LabelFindAllByTargetRow, error)
	LabelSetByTarget(ctx context.Context, arg LabelSetByTargetParams) error
	LabelUniqueKeys(ctx context.Context) ([]string, error)
	LastLogID(ctx context.Context) (int64, error)
	ListCheckConstraints(ctx context.Context) ([]ListCheckConstraintsRow, error)
	ListColumns(ctx context.Context) ([]ListColumnsRow, error)
	ListConstraints(ctx context.Context) ([]ListConstraintsRow, error)
	ListEnums(ctx context.Context) ([]ListEnumsRow, error)
	ListExtensions(ctx context.Context) ([]ListExtensionsRow, error)
	ListFunctions(ctx context.Context) ([]ListFunctionsRow, error)
	ListIndexes(ctx context.Context) ([]ListIndexesRow, error)
	ListSequences(ctx context.Context) ([]ListSequencesRow, error)
	ListTriggers(ctx context.Context) ([]ListTriggersRow, error)
	LockOneAlertService(ctx context.Context, id int64) (LockOneAlertServiceRow, error)
	LogEvents(ctx context.Context, id int64) ([]LogEventsRow, error)
	MessageMgrGetPending(ctx context.Context, sentAt pgtype.Timestamptz) ([]MessageMgrGetPendingRow, error)
	NfyLastMessageStatus(ctx context.Context, arg NfyLastMessageStatusParams) (NfyLastMessageStatusRow, error)
	NfyManyMessageStatus(ctx context.Context, dollar_1 []uuid.UUID) ([]NfyManyMessageStatusRow, error)
	NfyOriginalMessageStatus(ctx context.Context, arg NfyOriginalMessageStatusParams) (NfyOriginalMessageStatusRow, error)
	NoticeUnackedAlertsByService(ctx context.Context, dollar_1 uuid.UUID) (NoticeUnackedAlertsByServiceRow, error)
	NotifChanDeleteMany(ctx context.Context, dollar_1 []uuid.UUID) error
	NotifChanFindDestID(ctx context.Context, dest NullDestV1) (uuid.UUID, error)
	NotifChanFindMany(ctx context.Context, dollar_1 []uuid.UUID) ([]NotificationChannel, error)
	NotifChanFindOne(ctx context.Context, id uuid.UUID) (NotificationChannel, error)
	NotifChanLock(ctx context.Context) error
	// NotifChanUpsertDest will insert a new destination if it does not exist, or updating it's name if it does.
	NotifChanUpsertDest(ctx context.Context, arg NotifChanUpsertDestParams) (uuid.UUID, error)
	Now(ctx context.Context) (pgtype.Timestamptz, error)
	OverrideSearch(ctx context.Context, arg OverrideSearchParams) ([]OverrideSearchRow, error)
	ProcAcquireModuleLockNoWait(ctx context.Context, arg ProcAcquireModuleLockNoWaitParams) (int32, error)
	ProcAcquireModuleSharedLock(ctx context.Context, arg ProcAcquireModuleSharedLockParams) (int32, error)
	ProcLoadState(ctx context.Context, typeID EngineProcessingType) ([]byte, error)
	ProcReadModuleVersion(ctx context.Context, typeID EngineProcessingType) (int32, error)
	ProcSaveState(ctx context.Context, arg ProcSaveStateParams) error
	ProcSharedAdvisoryLock(ctx context.Context, pgTryAdvisoryXactLockShared int64) (bool, error)
	RequestAlertEscalationByTime(ctx context.Context, arg RequestAlertEscalationByTimeParams) (bool, error)
	SWOConnLock(ctx context.Context) (bool, error)
	SWOConnUnlockAll(ctx context.Context) error
	SchedMgrDataForUpdate(ctx context.Context) ([]SchedMgrDataForUpdateRow, error)
	// Returns all schedule IDs that have an entry in the schedule_data table.
	SchedMgrDataIDs(ctx context.Context) ([]uuid.UUID, error)
	SchedMgrEndOnCall(ctx context.Context, arg SchedMgrEndOnCallParams) error
	// Returns the data for a single schedule.
	SchedMgrGetData(ctx context.Context, scheduleID uuid.UUID) ([]byte, error)
	SchedMgrInsertMessage(ctx context.Context, arg SchedMgrInsertMessageParams) error
	// Returns the mapping of old notification channel IDs to new notification channel IDs.
	SchedMgrNCDedupMapping(ctx context.Context) ([]SchedMgrNCDedupMappingRow, error)
	SchedMgrOnCall(ctx context.Context) ([]SchedMgrOnCallRow, error)
	SchedMgrOverrides(ctx context.Context) ([]SchedMgrOverridesRow, error)
	SchedMgrRules(ctx context.Context) ([]SchedMgrRulesRow, error)
	SchedMgrSetData(ctx context.Context, arg SchedMgrSetDataParams) error
	// Sets the .V1.OnCallNotificationRules for a schedule.
	SchedMgrSetDataV1Rules(ctx context.Context, arg SchedMgrSetDataV1RulesParams) error
	SchedMgrStartOnCall(ctx context.Context, arg SchedMgrStartOnCallParams) error
	SchedMgrTimezones(ctx context.Context) ([]SchedMgrTimezonesRow, error)
	ScheduleFindManyByUser(ctx context.Context, tgtUserID uuid.NullUUID) ([]Schedule, error)
	SequenceNames(ctx context.Context) ([]string, error)
	SetAlertFeedback(ctx context.Context, arg SetAlertFeedbackParams) error
	SetManyAlertFeedback(ctx context.Context, arg SetManyAlertFeedbackParams) ([]int64, error)
	// Delete stale pending signals.
	SignalMgrDeleteStale(ctx context.Context) error
	// Get a batch of pending signals to process.
	SignalMgrGetPending(ctx context.Context, serviceID uuid.NullUUID) ([]SignalMgrGetPendingRow, error)
	SignalMgrGetScheduled(ctx context.Context, serviceID uuid.NullUUID) ([]SignalMgrGetScheduledRow, error)
	// Insert a new message into the outgoing_messages table.
	SignalMgrInsertMessage(ctx context.Context, arg SignalMgrInsertMessageParams) error
	// Update a pending signal with the message_id.
	SignalMgrUpdateSignal(ctx context.Context, arg SignalMgrUpdateSignalParams) error
	StatusMgrCMInfo(ctx context.Context, id uuid.UUID) (StatusMgrCMInfoRow, error)
	StatusMgrCleanupDisabledSubs(ctx context.Context) error
	StatusMgrCleanupStaleSubs(ctx context.Context) error
	StatusMgrDeleteSub(ctx context.Context, id int64) error
	StatusMgrLogEntry(ctx context.Context, arg StatusMgrLogEntryParams) (StatusMgrLogEntryRow, error)
	StatusMgrNextUpdate(ctx context.Context, dollar_1 []int64) (StatusMgrNextUpdateRow, error)
	StatusMgrSendChannelMsg(ctx context.Context, arg StatusMgrSendChannelMsgParams) error
	StatusMgrSendUserMsg(ctx context.Context, arg StatusMgrSendUserMsgParams) error
	StatusMgrUpdateCMForced(ctx context.Context, forcedDestTypes []string) error
	StatusMgrUpdateSub(ctx context.Context, arg StatusMgrUpdateSubParams) error
	TableColumns(ctx context.Context) ([]TableColumnsRow, error)
	UpdateCalSub(ctx context.Context, arg UpdateCalSubParams) error
	UserFavFindAll(ctx context.Context, arg UserFavFindAllParams) ([]UserFavFindAllRow, error)
	UserFavSet(ctx context.Context, arg UserFavSetParams) error
	UserFavUnset(ctx context.Context, arg UserFavUnsetParams) error
}

var _ Querier = (*Queries)(nil)
